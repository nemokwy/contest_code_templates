import os
from collections import Counter
import math

ret = []
commoninp = 'today_is_gonna_be_a_great_day'

inp = commoninp+'_validation_input.txt'
# inp = commoninp+'_sample_input.txt'
inp = commoninp+'_input.txt'

class NumArray:
    def __init__(self, nums1):
        self.n = len(nums1)
        self.nums = nums1.copy()
        self.d = [0] * (4 * n)
        self.mx = [0] * (4 * n)
        self.mxi = [0] * (4 * n)
        self.mn = [0] * (4 * n)
        self.mni = [0] * (4 * n)
        self.flip = [False] * (4 * n)
        self.MOD = 10 ** 9 + 7
        self.build(1,1,self.n)

    def prt(self):
        print('mx:', self.mx)
        print('mn:', self.mn)
        print('mxi:', self.mxi)
        print('mni:', self.mni)
        print('f:', self.flip)

    # 维护区间 1 的个数
    def maintain(self, o: int) -> None:
        if o * 2 + 1 >= self.n * 4:
            return
        if self.mx[o*2] >= self.mx[o*2+1]:
            self.mx[o],self.mxi[o] = self.mx[o*2], self.mxi[o*2]
        else:
            self.mx[o], self.mxi[o] = self.mx[o * 2+1], self.mxi[o * 2+1]
        if self.mn[o*2] <= self.mn[o*2+1]:
            self.mn[o],self.mni[o] = self.mn[o*2], self.mni[o*2]
        else:
            self.mn[o], self.mni[o] = self.mn[o * 2+1], self.mni[o * 2+1]


    # 执行区间反转
    def do(self, o: int, l: int, r: int) -> None:
        self.flip[o] = not self.flip[o]
        self.mx[o], self.mxi[o], self.mn[o], self.mni[o] = self.MOD - self.mn[o], self.mni[o], self.MOD - self.mx[o], self.mxi[o]

    # 初始化线段树   o,l,r=1,1,n
    def build(self, o: int, l: int, r: int) -> None:
        if l == r:
            # cnt1[o] = nums1[l - 1]
            self.d[o] = self.nums[l-1]
            self.mx[o] = self.nums[l-1]
            self.mn[o] = self.nums[l-1]
            self.mxi[o] = l
            self.mni[o] = l
            return
        m = (l + r) // 2
        self.build(o * 2, l, m)
        self.build(o * 2 + 1, m + 1, r)
        self.maintain(o)

    # 反转区间 [L,R]   o,l,r=1,1,n
    def update(self, o: int, l: int, r: int, L: int, R: int) -> None:
        if L <= l and r <= R:
            self.do(o, l, r)
            return
        else:
            m = (l + r) // 2
            if self.flip[o]:
                self.do(o * 2, l, m)
                self.do(o * 2 + 1, m + 1, r)
                self.flip[o] = False
            if m >= L:
                self.update(o * 2, l, m, L, R)
            if m < R:
                self.update(o * 2 + 1, m + 1, r, L, R)
        self.maintain(o)


with open(inp, 'r') as fp:
    case_n = int(fp.readline())
    # case_n = 2
    for case in range(case_n):
        n = int(fp.readline())
        a = [int(i) for i in fp.readline().split()]
        # print(a)\
        ST = NumArray(a)
        # ST.prt()

        q = int(fp.readline())
        val = 0
        for i in range(q):
            aa = [int(i) for i in fp.readline().split()]
            # print(aa)
            l,r = aa[0],aa[1]
            ST.update(1, 1, n, l, r)
            y = ST.mxi[1]
            # print(l, r,y)
            # ST.prt()
            val += y


        ret.append('Case #' + str(case + 1) + ': ' + str(val) + '\n')
        # if a >= k + 1 and b >= k:
        #     r.append('Case #' + str(case + 1) + ': YES\n')
        # else:
        #     r.append('Case #' + str(case + 1) + ': NO\n')

with open(inp[:-10]+'_output.txt', 'w') as fp:
    fp.writelines(ret)
    print(ret)