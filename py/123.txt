
#1 ...
#2 UnionFind
#3 Two Pointer
#4 lambda key sort
#5 heap dijkstra
#6 SegTree
#7 Fast nCm % p problem
#8 Reload < for ListNode in heap
#9 Manacher
#10 euler_flag_prime

#1 ...
def calcEquation(self, equations, values, queries):
    quot = collections.defaultdict(dict)
    for (num, den), val in zip(equations, values):
        quot[num][num] = quot[den][den] = 1.0
        quot[num][den] = val
        quot[den][num] = 1 / val
    for k, i, j in itertools.permutations(quot, 3):
        if k in quot[i] and j in quot[k]:
            quot[i][j] = quot[i][k] * quot[k][j]
    return [quot[num].get(den, -1.0) for num, den in queries]

#2 UnionFind https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/discuss/197668/Count-the-Number-of-Islands-O(N)
    def removeStones(self, points):
UF = {}
        def find(x):
            UF.setdefault(x, x)
            if x != UF[x]:
                UF[x] = find(UF[x])
            return UF[x]
        def union(x, y):
            UF.setdefault(x, x)
            UF.setdefault(y, y)
            UF[find(x)] = find(y)

        for i, j in points:
            union(i, ~j)
        return len(points) - len({find(x) for x in UF})

class UnionFind:
    def __init__(self, n: int) -> None:
        self.root = [i for i in range(n)]
        self.size = [1] * n
        self.part = n
        return

    def find(self, x):
        lst = []
        while x != self.root[x]:
            lst.append(x)
            # 在查询的时候合并到顺带直接根节点
            x = self.root[x]
        for w in lst:
            self.root[w] = x
        return x

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x == root_y:
            return False
        if self.size[root_x] >= self.size[root_y]:
            root_x, root_y = root_y, root_x
        self.root[root_x] = root_y
        self.size[root_y] += self.size[root_x]
        # 将非根节点的秩赋0
        self.size[root_x] = 0
        self.part -= 1
        return True

    def is_connected(self, x, y):
        return self.find(x) == self.find(y)

    def get_size(self, x):
        return self.size[self.find(x)]

    def get_root_part(self):
        # 获取每个根节点对应的组
        part = defaultdict(list)
        n = len(self.root)
        for i in range(n):
            part[self.find(i)].append(i)
        return part

    def get_root_size(self):
        # 获取每个根节点对应的组大小
        size = defaultdict(int)
        n = len(self.root)
        for i in range(n):
            size[self.find(i)] = self.size[self.find(i)]
        return size

素数筛
class NumberTheoryPrimeFactor:
    def __init__(self, ceil):
        self.ceil = ceil
        self.prime_factor = [[] for _ in range(self.ceil + 1)]
        self.min_prime = [0] * (self.ceil + 1)
        self.get_min_prime_and_prime_factor()
        return

    def get_min_prime_and_prime_factor(self):
        # 模板：计算 1 到 self.ceil 所有数字的最小质数因子
        for i in range(2, self.ceil + 1):
            if not self.min_prime[i]:
                self.min_prime[i] = i
                for j in range(i * i, self.ceil + 1, i):
                    self.min_prime[j] = i

        # 模板：计算 1 到 self.ceil 所有数字的质数分解（可选）
        for num in range(2, self.ceil + 1):
            i = num
            while num > 1:
                p = self.min_prime[num]
                cnt = 0
                while num % p == 0:
                    num //= p
                    cnt += 1
                self.prime_factor[i].append([p, cnt])
        return

nt = NumberTheoryPrimeFactor(10**5+1)

#3 Two Pointer https://leetcode.com/problems/partition-labels/discuss/298474/Python-two-pointer-solution-with-explanation
def partition_labels(S):
	rightmost = {c:i for i, c in enumerate(S)}
	left, right = 0, 0
	result = []
	for i, letter in enumerate(S):
		right = max(right,rightmost[letter])
		if i == right:
			result += [right-left + 1]
			left = i+1
	return result

#4 lambda key sort https://leetcode.com/problems/queue-reconstruction-by-height/submissions/
        result = []
        people.sort(key = lambda a: (-a[0], a[1]))
        for x in people: 
            result.insert(x[1], x);
        return result

#5 heap dijkstra
class Solution(object):
    def networkDelayTime(self, times, N, K):
        graph = collections.defaultdict(list)
        for u, v, w in times:
            graph[u].append((v, w))
        pq = [(0, K)]
        dist = {}
        while pq:
            d, node = heapq.heappop(pq)
            if node in dist: continue
            dist[node] = d
            for nei, d2 in graph[node]:
                if nei not in dist:
                    heapq.heappush(pq, (d+d2, nei))
        return max(dist.values()) if len(dist) == N else -1

#6 SegTree
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class SegmentTree:
    def __init__(self, u, v):
        self.u, self.v = u, v
        self.label = 0
        if u == v:
            self.left = None
            self.right = None
        else:
            self.left = SegmentTree(u, self.mid)
            self.right = SegmentTree(self.mid + 1, v)
    @property
    def mid(self):
        return (self.u + self.v) // 2
    def update(self, t, u, v):
        if u <= self.u and self.v <= v:
            self.label = t
            return
        if self.label != -1:
            self.left.label = self.label
            self.right.label = self.label
            self.label = -1
        if u <= self.mid:
            self.left.update(t, u, v)
        if self.mid < v:
            self.right.update(t, u, v)
    def query(self):
        if self.label != -1:
            return self.label * (self.v - self.u + 1)
        return self.left.query() + self.right.query()
    
class Solution:
    def getNumber(self, root: Optional[TreeNode], ops: List[List[int]]) -> int:
        def dfs(p):
            nonlocal a
            if p is None:
                return
            dfs(p.left)
            a.append(p.val)
            dfs(p.right)
        a = []
        dfs(root)
        d = {}
        for i, x in enumerate(a):
            d[x] = i
        tree = SegmentTree(0, len(a) - 1)
        for t, x, y in ops:
            tree.update(t, d[x], d[y])
        return tree.query()

#7 Fast nCm % p problem:
        def C(n, m, p):
            a = 1
            for i in range(m):
                a = a * (n - i) * pow(i + 1, p - 2, p) % p
            return a

#8 Reload < for ListNode in heap
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        def __lt__(a: ListNode, b: ListNode):
            return a.val < b.val
        ListNode.__lt__ = __lt__

#9 Manacher https://leetcode.com/problems/longest-palindromic-substring/discuss/3337/Manacher-algorithm-in-Python-O%28n%29
    def longestPalindrome(self, s):
        # Transform S into T.
        # For example, S = "abba", T = "^#a#b#b#a#$".
        # ^ and $ signs are sentinels appended to each end to avoid bounds checking
        T = '#'.join('^{}$'.format(s))
        n = len(T)
        P = [0] * n
        C = R = 0
        for i in range (1, n-1):
            P[i] = (R > i) and min(R - i, P[2*C - i]) # equals to i' = C - (i-C)
            # Attempt to expand palindrome centered at i
            while T[i + 1 + P[i]] == T[i - 1 - P[i]]:
                P[i] += 1
    
            # If palindrome centered at i expand past R,
            # adjust center based on expanded palindrome.
            if i + P[i] > R:
                C, R = i, i + P[i]
    
        # Find the maximum element in P.
        maxLen, centerIndex = max((n, i) for i, n in enumerate(P))
        return s[(centerIndex  - maxLen)//2: (centerIndex  + maxLen)//2]

#10 
def euler_flag_prime(n):
    # 欧拉线性筛素数，返回小于等于 n 的所有素数
    flag = [False for _ in range(n + 1)]
    prime_numbers = []
    for num in range(2, n + 1):
        if not flag[num]:
            prime_numbers.append(num)
        for prime in prime_numbers:
            if num * prime > n:
                break
            flag[num * prime] = True
            if num % prime == 0:  # 这句是最有意思的地方  下面解释
                break
    return prime_numbers
